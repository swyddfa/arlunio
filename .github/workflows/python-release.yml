name: Python Release

on:
  # <trigger-push>
  push:
    branches:
    - master
    paths:
    - 'arlunio/**'
    - 'docs/users/**'
    - 'setup.py'
    - 'MANIFEST.in'
  # </trigger-push>
  # <trigger-cron>
  schedule:
    - cron: '0 2 * * *'
  # </trigger-cron>

jobs:
  # <release-job>
  Release:
    runs-on: ubuntu-latest
  # </release-job>
    steps:

    # <release-job-check>
    - uses: actions/checkout@v1

    - name: 'Should Release?'
      id: dorel
      run: |
          if [[ "$REF" = 'refs/heads/develop' ]]; then
            ./scripts/should-release.sh
          else
            echo "::set-output name=should_release::true"
          fi
      env:
          REF: ${{github.ref}}
    # </release-job-check>

    # <release-job-setup>
    - name: Setup Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
      if: steps.dorel.outputs.should_release

    - name: Setup Environment
      run: |
        python --version
        python -m pip install --upgrade pip
        python -m pip install --upgrade tox
      if: steps.dorel.outputs.should_release
    # </release-job-setup>

    # <release-job-version>
    - name: Get Version Number
      uses: einaregilsson/build-number@v1
      with:
        token: ${{secrets.github_token}}
      if: github.ref == 'refs/heads/develop' && steps.dorel.outputs.should_release

    - name: Set Version Number
      shell: bash
      run : |
        sed -i 's/"\(.*\)"/"\1b'"${BUILD_NUMBER}"'"/' arlunio/_version.py
        cat arlunio/_version.py
      if: github.ref == 'refs/heads/develop' && steps.dorel.outputs.should_release

    # </release-job-version>

    # <release-job-info>
    - name: Export release info
      id: info
      run: |
         version=$(sed 's/.*"\(.*\)".*/\1/' arlunio/_version.py)
         release_date=$(date +%Y-%m-%d)

         echo "::set-env name=VERSION::$version"
         echo "::set-output name=VERSION::$version"

         echo "::set-env name=RELEASE_DATE::$release_date"
         echo "::set-output name=RELEASE_DATE::$release_date"
      if: steps.dorel.outputs.should_release
    # </release-job-info>

    # <release-job-pkg>
    - name: Build Package
      run: |
        tox -e pkg
      if: steps.dorel.outputs.should_release
    # </release-job-pkg>

    # <release-job-assets>
    - name: Export release assets
      id: pkg
      run: |
        whl=$(find dist/ -name '*.whl' -exec basename {} \;)
        echo "::set-output name=WHL::$whl"

        src=$(find dist/ -name '*.tar.gz' -exec basename {} \;)
        echo "::set-output name=SRC::$src"
      if: steps.dorel.outputs.should_release
    # </release-job-assets>

    # <release-job-tag>
    - name: Tag Release
      run: |
        commit=$(git rev-parse HEAD)

        # POST a new ref to repo via Github API
        curl -s -X POST https://api.github.com/repos/${{ github.repository }}/git/refs \
        -H "Authorization: token $GITHUB_TOKEN" \
        -d @- << EOF
        {
          "ref": "refs/tags/V$VERSION",
          "sha": "$commit"
        }
        EOF
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: steps.dorel.outputs.should_release
    # </release-job-tag>

    # <release-job-create>
    - name: Create Release
      id: release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: V${{ steps.info.outputs.VERSION }}
        release_name: V${{ steps.info.outputs.VERSION}} - ${{ steps.info.outputs.RELEASE_DATE }}
        draft: false
        prerelease: ${{ github.ref == 'refs/heads/develop' }}
      if: steps.dorel.outputs.should_release
    # </release-job-create>

    # <release-job-upload>
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: dist/${{ steps.pkg.outputs.WHL }}
        asset_name: ${{ steps.pkg.outputs.WHL }}
        asset_content_type: application/octet-stream
      if: steps.dorel.outputs.should_release

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: dist/${{ steps.pkg.outputs.SRC }}
        asset_name: ${{ steps.pkg.outputs.SRC }}
        asset_content_type: application/octet-stream
      if: steps.dorel.outputs.should_release
    # </release-job-upload>

    # <release-job-notes>
    - name: Upload Release Notes
      shell: bash
      run: |
        python -m pip install towncrier docutils

        ./scripts/write-release-notes.sh > release-notes.html
        notes=$(cat release-notes.html)
        echo $notes

        curl -s -X PATCH https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.release.outputs.id }} \
        -H "Authorization: token $GITHUB_TOKEN" \
        -d @- << EOF
        {
          "body": "$notes"
        }
        EOF
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: steps.dorel.outputs.should_release
    # </release-job-notes>

    # <release-job-pypi>
    - name: Publish to PyPi
      run: |
        python -m pip install twine
        twine upload dist/* -u alcarney -p ${{ secrets.PYPI_PASS }}
      if: steps.dorel.outputs.should_release
    # </release-job-pypi>
